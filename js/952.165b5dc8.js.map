{"version":3,"file":"js/952.165b5dc8.js","mappings":"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","sources":["webpack://@vue-cli/core/./node_modules/vue-inline-svg/dist/vue-inline-svg.js"],"sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('vue')) :\n    typeof define === 'function' && define.amd ? define(['vue'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.VueInlineSvg = factory(global.Vue));\n})(this, (function (vue) { 'use strict';\n\n    // peer dep is not installed during test\n    /** @type Object{string: Promise<Element>} */\n\n    var cache = {};\n    /**\n     * Remove false attrs\n     * @param {Object} attrs\n     */\n\n    function filterAttrs(attrs) {\n      return Object.keys(attrs).reduce(function (result, key) {\n        if (attrs[key] !== false && attrs[key] !== null && attrs[key] !== undefined) {\n          result[key] = attrs[key];\n        }\n\n        return result;\n      }, {});\n    }\n\n    var InlineSvg = {\n      name: 'InlineSvg',\n      inheritAttrs: false,\n      render: function render() {\n        if (!this.svgElSource) {\n          return null;\n        }\n\n        return vue.h('svg', Object.assign({}, // source attrs\n        this.getSvgAttrs(this.svgElSource), // component attrs and listeners\n        filterAttrs(this.$attrs), // content\n        {\n          innerHTML: this.getSvgContent(this.svgElSource)\n        }));\n      },\n      props: {\n        src: {\n          type: String,\n          required: true\n        },\n        title: {\n          type: String\n        },\n        transformSource: {\n          type: Function,\n          \"default\": function _default(svg) {\n            return svg;\n          }\n        },\n        keepDuringLoading: {\n          type: Boolean,\n          \"default\": true\n        }\n      },\n      emits: ['loaded', 'unloaded', 'error'],\n      data: function data() {\n        return {\n          /** @type SVGElement */\n          svgElSource: null\n        };\n      },\n      watch: {\n        src: function src(newValue) {\n          // re-generate cached svg (`svgElSource`)\n          this.getSource(newValue);\n        }\n      },\n      mounted: function mounted() {\n        // generate `svgElSource`\n        this.getSource(this.src);\n      },\n      methods: {\n        getSvgAttrs: function getSvgAttrs(svgEl) {\n          // copy attrs\n          var svgAttrs = {};\n          var attrs = svgEl.attributes;\n\n          if (!attrs) {\n            return svgAttrs;\n          }\n\n          for (var i = attrs.length - 1; i >= 0; i--) {\n            svgAttrs[attrs[i].name] = attrs[i].value;\n          }\n\n          return svgAttrs;\n        },\n        getSvgContent: function getSvgContent(svgEl) {\n          svgEl = svgEl.cloneNode(true);\n          svgEl = this.transformSource(svgEl);\n\n          if (this.title) {\n            setTitle(svgEl, this.title);\n          } // copy inner html\n\n\n          return svgEl.innerHTML;\n        },\n\n        /**\n         * Get svgElSource\n         * @param {string} src\n         */\n        getSource: function getSource(src) {\n          var _this = this;\n\n          // fill cache by src with promise\n          if (!cache[src]) {\n            // download\n            cache[src] = this.download(src);\n          } // notify svg is unloaded\n\n\n          if (this.svgElSource && cache[src].isPending() && !this.keepDuringLoading) {\n            this.svgElSource = null;\n            this.$emit('unloaded');\n          } // inline svg when cached promise resolves\n\n\n          cache[src].then(function (svg) {\n            _this.svgElSource = svg; // wait to render\n\n            _this.$nextTick(function () {\n              // notify\n              _this.$emit('loaded', _this.$el);\n            });\n          })[\"catch\"](function (err) {\n            // notify svg is unloaded\n            if (_this.svgElSource) {\n              _this.svgElSource = null;\n\n              _this.$emit('unloaded');\n            } // remove cached rejected promise so next image can try load again\n\n\n            delete cache[src];\n\n            _this.$emit('error', err);\n          });\n        },\n\n        /**\n         * Get the contents of the SVG\n         * @param {string} url\n         * @returns {Promise<Element>}\n         */\n        download: function download(url) {\n          return makePromiseState(new Promise(function (resolve, reject) {\n            var request = new XMLHttpRequest();\n            request.open('GET', url, true);\n\n            request.onload = function () {\n              if (request.status >= 200 && request.status < 400) {\n                try {\n                  // Setup a parser to convert the response to text/xml in order for it to be manipulated and changed\n                  var parser = new DOMParser();\n                  var result = parser.parseFromString(request.responseText, 'text/xml');\n                  var svgEl = result.getElementsByTagName('svg')[0];\n\n                  if (svgEl) {\n                    // svgEl = this.transformSource(svgEl);\n                    resolve(svgEl);\n                  } else {\n                    reject(new Error('Loaded file is not valid SVG\"'));\n                  }\n                } catch (e) {\n                  reject(e);\n                }\n              } else {\n                reject(new Error('Error loading SVG'));\n              }\n            };\n\n            request.onerror = reject;\n            request.send();\n          }));\n        }\n      }\n    };\n    /**\n     * Create or edit the <title> element of a SVG\n     * @param {SVGElement} svg\n     * @param {string} title\n     */\n\n    function setTitle(svg, title) {\n      var titleTags = svg.getElementsByTagName('title');\n\n      if (titleTags.length) {\n        // overwrite existing title\n        titleTags[0].textContent = title;\n      } else {\n        // create a title element if one doesn't already exist\n        var titleEl = document.createElementNS('http://www.w3.org/2000/svg', 'title');\n        titleEl.textContent = title;\n        svg.appendChild(titleEl);\n      }\n    }\n    /**\n     * @typedef {Promise} PromiseWithState\n     * @property {Function<boolean>} isPending\n     */\n\n    /**\n     * This function allow you to modify a JS Promise by adding some status properties.\n     * @param {Promise|PromiseWithState} promise\n     * @return {PromiseWithState}\n     */\n\n\n    function makePromiseState(promise) {\n      // Don't modify any promise that has been already modified.\n      if (promise.isPending) return promise; // Set initial state\n\n      var isPending = true; // Observe the promise, saving the fulfillment in a closure scope.\n\n      var result = promise.then(function (v) {\n        isPending = false;\n        return v;\n      }, function (e) {\n        isPending = false;\n        throw e;\n      });\n\n      result.isPending = function getIsPending() {\n        return isPending;\n      };\n\n      return result;\n    }\n\n    return InlineSvg;\n\n}));\n"],"names":["global","factory","module","exports","this","vue","cache","filterAttrs","attrs","Object","keys","reduce","result","key","undefined","InlineSvg","name","inheritAttrs","render","svgElSource","h","assign","getSvgAttrs","$attrs","innerHTML","getSvgContent","props","src","type","String","required","title","transformSource","Function","svg","keepDuringLoading","Boolean","emits","data","watch","newValue","getSource","mounted","methods","svgEl","svgAttrs","attributes","i","length","value","cloneNode","setTitle","_this","download","isPending","$emit","then","$nextTick","$el","err","url","makePromiseState","Promise","resolve","reject","request","XMLHttpRequest","open","onload","status","parser","DOMParser","parseFromString","responseText","getElementsByTagName","Error","e","onerror","send","titleTags","textContent","titleEl","document","createElementNS","appendChild","promise","v"],"sourceRoot":""}